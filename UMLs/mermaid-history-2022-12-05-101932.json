[{"state":{"code":"sequenceDiagram\n\n    MainWindow ->>+ GameController: NewGame()\n\n    GameController -->> GameController: Sets default values\n    GameController ->>+ DuckController: GenerateDucks(Game game, duckCount)\n\n    loop genereates new Ducks\n        DuckController ->> DuckController: list<Duck>.Add(NewDuck())\n    end\n    DuckController -->>- GameController: List<Ducks>\n    GameController ->>+ DogController: NewDog()\n    DogController -->>- GameController: returns Dog\n    GameController -->>- MainWindow: Instance: Game\n\n    loop GameLoop\n        alt is start of Round\n            note right of MainWindow: Change to walk state\n            MainWindow ->> DogController: changeAnimState(Game game, targetState)\n            MainWindow ->> DogController: Move(Dog dog, targetPos, deltaTime)\n            note right of MainWindow: Change to jump State\n            MainWindow ->> DogController: ChangeAnimState(Game game, targetState)\n            MainWindow ->> DogController: Move(Dog dog, targetPos, deltaTime)\n            note right of MainWindow: Changes dog to background\n            MainWindow ->> DogController: ChangeDisplayLayer(Dog dog)\n            MainWindow ->> DogController: Move(Dog dog, targetPos, deltaTime)\n            MainWindow ->> DogController: ChangeVisability(Dog dog)\n            MainWindow ->> DogController: ChangeDisplayLayer(Dog dog)\n        end\n        MainWindow ->> DuckController: ChangeAnimState(Duck duck)\n        MainWindow ->> DuckController: ChangeVisability(Duck duck)\n        MainWindow ->> DuckController: Fly(Duck duck, deltaTime)\n        MainWindow ->> GameController: Shoot(Game game, mousePos)\n        GameController ->> GameController: changeCanShoot(Game game)\n        GameController ->> GameController: subBullets(Game game)\n        GameController ->> DogController: ChangeVisability(Dog dog)\n        alt shot lands\n            GameController ->> DuckController: ChangeIsHit(Duck duck)\n            GameController ->> DuckController: ChangeAnimState(Duck duck, targetState)\n            GameController ->> DuckController: getPoints(Duck duck)\n            DuckController -->> GameController: points\n            GameController ->> GameController: AddPoints(Game game)\n            GameController ->> DogController: SetPosition(Dog dog, Duck duck)\n            GameController ->> DogController: ChangeAnimState(Dog dog, targetState)\n            GameController ->> DogController: Move(Dog dog, targetPos)\n            GameController ->> GameController: NextDuck(Game game)\n            GameController ->> GameController: restoreBullets(Game game)\n\n        else shot misses             \n\n        else shot misses & no more bullers\n\n            GameController ->> DuckController: ChangeAnimState(Duck duck, targetState)\n            GameController ->> DuckController: ChangeFlyAway(Duck duck)\n            GameController ->> DogController: CenterDog(Dog dog)\n            GameController ->> DogController: ChangeAnimState(Dog dog, targetState)\n            GameController ->> DogController: Move(Dog dog, targetPos)\n            GameController ->> GameController: NextDuck(Game game)\n            GameController ->> GameController: RestoreBullets(Game game)\n\n        end\n        GameController ->> DogController: ChangeAnimState(Dog dog, targetState)\n        GameController ->> DogController: Move(Dog dog, targetPos, deltaTime)\n        GameController ->> DogController: ChangeVisability(Dog dog)\n        note left of DogController: Hides dog\n\n        MainWindow ->> GameController: CheckStateOfGame(Game game)\n        alt currentDuck exceeds duck list count\n            alt hit Goal not reached\n                GameController ->> GameController: restartGame(Game game)\n            else hit goal reached\n                GameController ->> GameController: addRound(Game game)\n                note right of GameController: also restors ducks\n            end\n        else CurrentDuck doesNot exceed duck list count\n        end\n        MainWindow ->> GameController: ChangeCanShoot(Game game)\n    end","mermaid":"{\n  \"theme\": \"forest\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"editorMode":"code","pan":{"x":-233.58526611328125,"y":-2545.802734375},"zoom":6.493432026402611},"time":1670228140733,"type":"manual","id":"eae8d0a6-46cc-49ab-8260-ce0465978b45","name":"ugly-zettabyte"},{"state":{"code":"classDiagram\n    WindowMain *-- Game\n    WindowMain <-- ControllerGame\n    WindowMain <-- ControllerDuck\n    WindowMain <-- ControllerDog\n    Game *-- Dog\n    Game *-- Duck\n\n    Duck --> EnumDuckType\n    Duck --> EnumDuckAnimState\n    Dog --> EnumDogAnimState\n    \n    class WindowMain{\n        game: Game\n        duckAnimSprites: Dict <.EnumDuckAnimState, Sprite>\n        dogAnimSprites: Dict <.EnumDogAnimState, Sprite>\n        duckTypeSprites: Dict <.EnumDuckType, Sprite>\n        update(deltaTime)\n        draw(deltaTime)\n    }\n\n    class Game{\n        screenHeight: int\n        screenWidth: int\n        round: int\n        points: int\n        bullets: int\n        gameOver: boolean\n        canShoot: boolean\n        birdHitGoal: int\n        currentDuck: int\n        ducks: List[Duck]\n        dog: Dog\n    }\n    class ControllerGame{\n        NewGame(): Game\n        Update(Game game)\n        GetRound(Game game)\n        AddRound(Game game)\n        GetPoints(Game game)\n        AddPoints(Game game)\n        GetBullets(Game game)\n        SubBullets(Game game)\n        RestoreBullets(Game game)\n        GetCanShoot(Game game)\n        ChangeCanShoot(Game game)\n        Shoot(Game game, mousePos)\n        GetCurrentDuck(Game game)\n        NextDuck(Game game)\n        ChangeGameOver(Game game)\n        GetHitGoal(Game game)\n        RestartGame(Game game)\n        CheckStateOfGame(Game game)\n    }\n\n    class ControllerDuck{\n        NewDuck(): Duck\n        GenerateDucks(Game game)\n        Fly(Duck duck)\n        GetIsHit(Duck duck)\n        ChangeIsHit(Duck duck)\n        GetIsVisable(Duck duck)\n        ChangeVisability(Duck duck)\n        GetIsFlyAway(Duck duck)\n        ChangeIsFlyAway(Duck duck)\n        ChangeAnimState(Duck duck, EnumDuckAnimState targetState)\n        \n    }\n    class Duck {\n        points: int\n        speed: float\n        posX: int \n        posY: int \n        isHit: boolean\n        isVisable: boolean\n        flyAway: boolean\n        flyDirectionVertical: boolean\n        flyDirectionHorizontal: boolean\n        enumDuck: EnumDuck\n        enumDuckAnimState: EnumDuckAnimState\n        animDuration: int\n        \n    }\n    class EnumDuckType {\n        <<enum>>\n        RED_DUCK\n        BLUE_DUCK\n        BLACK_DUCK\n    }\n\n    class EnumDuckAnimState {\n        <<enum>>\n        IDLE\n        FLY_LEFT\n        FLY_RIGHT\n        FLY_UP\n        HIT\n        FALL\n    }\n\n    class ControllerDog {\n        NewDog(): Dog\n        Move(Dog dog,targetPos)\n        SetPosition(Dog dog, Duck duck)\n        CenterDog(Dog dog)\n        ChangeAnimState(Dog dog, EnumDogState targetState)\n        ChangeVisability(Dog dog)\n        ChangeDisplayLayer(Dog dog)\n    }\n    class Dog {\n        posX: int \n        posY: int\n        posTargetX: int\n        posTargetY: int\n        isInBackground: boolean\n        animDuration: int\n        enumDogAnimState: EnumDogAnimState\n    }\n\n    class EnumDogAnimState{\n        <<enum>>\n        IDLE\n        WALK\n        JUMP\n        SHOW_DUCK\n        LAUGH\n    }\n\n    \n    ","mermaid":"{\n  \"theme\": \"forest\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-129.3592071533203,"y":-63.91661834716797},"zoom":1.281692381604667,"editorMode":"code"},"time":1670227634382,"type":"manual","id":"351cf623-7623-493b-a404-f47a8198fd05","name":"hallowed-match"}]